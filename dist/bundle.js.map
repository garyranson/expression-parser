{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/expressions.ts","src/index.ts","src/lexer.ts","src/parser.ts","src/scanner.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export interface Expression {\r\n  visit<T>(visit: Visitor<T>): T;\r\n}\r\n\r\nexport interface ObjectProperties {\r\n  names: string[];\r\n  expressions: Array<Expression>;\r\n}\r\n\r\nexport interface Visitor<T> {\r\n  visitBinary(operator: string, left: Expression, right: Expression): T;\r\n  visitLogical(operator: string, left: Expression, right: Expression): T;\r\n  visitLiteral(value: any, raw: string): T;\r\n  visitScopedAccessor(name: string): T;\r\n  visitMember(object: Expression, property: Expression, computed: boolean): T;\r\n  visitMemberCall(object: Expression, expression: Expression, args: Expression[]): T;\r\n  visitCall(callee: Expression, args: Expression[]): T;\r\n  visitConditional(test: Expression, consequent: Expression, alternate: Expression): T;\r\n  visitUnary(operator: string, argument: Expression): T;\r\n  visitArray(elements: Expression[]): T;\r\n  visitObject(propertyNames: Array<string>, expressions: Expression[]): T;\r\n}\r\n\r\nexport class Literal implements Expression {\r\n  constructor(private raw: string, private value: any) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitLiteral(this.value, this.raw);\r\n  }\r\n}\r\nexport class LiteralString implements Expression {\r\n  constructor(private raw: string) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitLiteral(this.raw, this.raw);\r\n  }\r\n}\r\nexport class LiteralNumber implements Expression {\r\n  constructor(private value: number) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitLiteral(this.value, undefined);\r\n  }\r\n}\r\nexport class ScopedAccessorExpression implements Expression {\r\n  constructor(private name: string) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitScopedAccessor(this.name);\r\n  }\r\n}\r\nexport class MemberAccessorExpression implements Expression {\r\n  constructor(private object: Expression, private property: Expression, private computed: boolean) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitMember(this.object, this.property, this.computed);\r\n  }\r\n}\r\nexport class MemberCallExpression implements Expression {\r\n  constructor(private object: Expression, private member: Expression, private args: Expression[]) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitMemberCall(this.object, this.member, this.args);\r\n  }\r\n}\r\nexport class ConditionalExpression implements Expression {\r\n  constructor(private test: Expression, private consequent: Expression, private alternate: Expression) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitConditional(this.test, this.consequent, this.alternate);\r\n  }\r\n}\r\nexport class UnaryExpression implements Expression {\r\n  constructor(private unaryType: string, private argument: Expression) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitUnary(this.unaryType, this.argument);\r\n  }\r\n}\r\nexport class CallExpression implements Expression {\r\n  constructor(private callee: Expression, private args: Array<Expression>) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitCall(this.callee, this.args);\r\n  }\r\n}\r\nexport class ArrayExpression implements Expression {\r\n  constructor(private elements: Array<Expression>) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitArray(this.elements);\r\n  }\r\n}\r\nexport class ObjectExpression implements Expression {\r\n  constructor(private propertyNames: Array<string>, private expressions: Array<Expression>) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitObject(this.propertyNames, this.expressions);\r\n  }\r\n}\r\nexport class BinaryExpression implements Expression {\r\n  constructor(private operator: string, private left: Expression, private right: Expression) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitBinary(this.operator, this.left, this.right);\r\n  }\r\n}\r\nexport class LogicalExpression implements Expression {\r\n  constructor(private operator: string, private left: Expression, private right: Expression) {\r\n  }\r\n\r\n  visit<T>(visitor: Visitor<T>): T {\r\n    return visitor.visitBinary(this.operator, this.left, this.right);\r\n  }\r\n}","export {Parser} from \"./parser\";\nexport {Expression, Visitor} from \"./expressions\";","import {LexerToken, Scanner} from \"./scanner\";\n\nexport default class LexerReader {\n  reader: Scanner;\n\n  constructor(value: string) {\n    this.reader = new Scanner(value);\n  }\n\n  next(): LexerToken {\n    return  this.reader.next();\n  }\n}","import LexerReader from \"./lexer\";\nimport {\n  Expression, ObjectProperties,\n  Literal, LiteralNumber, LiteralString, MemberCallExpression, MemberAccessorExpression,\n  CallExpression, UnaryExpression, ObjectExpression, ArrayExpression, ConditionalExpression, ScopedAccessorExpression,\n  BinaryExpression, LogicalExpression\n} from \"./expressions\";\nimport {LexerToken} from \"./scanner\";\n\nlet emptyExpressionList: Array<Expression> = [];\n\nexport class Parser {\n  parseExpression(input: string): Expression {\n    return new ParserImpl(new LexerReader(input || \"\")).getExpression();\n  }\n}\n\nclass ParserImpl {\n  cur: LexerToken;\n\n  constructor(private iterator: LexerReader) {\n    console.assert(!!iterator);\n    this.consume();\n  }\n\n  getExpression() {\n    return this.eof()\n      ? Constants.literalUndefined\n      : this.getExpression2();\n  }\n\n  getExpression2() {\n    const expr = this.parseExpression();\n    if (this.eof()) {\n      return expr;\n    }\n    this.raiseError(`Unconsumed token ${this.cur.value}`);\n  }\n\n  consume(): void {\n    this.cur = this.iterator.next();\n  }\n\n  expect(str: string): boolean {\n    if (this.cur.value === str) {\n      this.consume();\n      return true;\n    }\n    return false;\n  }\n\n  eof(): boolean {\n    return this.cur.type === \"eof\";\n  }\n\n  parseExpression(): Expression {\n    let result = this.parseIt();\n    return this.cur.value === \"?\"\n      ? this.parseConditionalExpression(result)\n      : result;\n  }\n\n  parseConditionalExpression(expr: Expression): Expression {\n    this.consume();\n    let trueCondition = this.parseExpression();\n    if (this.expect(\":\")) {\n      return Creators.createConditionalExpression(expr, trueCondition, this.parseExpression());\n    }\n    this.raiseError(\"Conditional expression invalid\");\n  }\n\n  parseIt(): Expression {\n    let expr     = this.parsePrefix();\n    let operator = Creators.getOperatorFactory(this.cur.value);\n\n    if (operator) {\n      this.consume();\n      let e             = 1, o = 0;\n      const expressions = [/*left*/expr, /*right*/this.parsePrefix()];\n      const operators   = [operator];\n\n      while (operator = Creators.getOperatorFactory(this.cur.value)) {\n        this.consume();\n        // If operator on top of stack has greater precedence then pop/push expression\n        while (o >= 0 && operator.precedence <= operators[o].precedence) {\n          e--;\n          expressions[e] = operators[o--].create(/*left*/expressions[e], /*right*/expressions[e + 1]);\n        }\n        operators[++o]   = operator;\n        expressions[++e] = this.parsePrefix();\n      }\n      expr = expressions[e];\n      for (let i = e - 1; i >= 0; i--) {\n        expr = operators[o--].create(expressions[i], expr);\n      }\n    }\n    return expr;\n  }\n\n  /**\n   *\n   * @returns {any}\n   */\n  parsePrefix(): Expression {\n    switch (this.cur.value) {\n      case \"+\":\n      case \"-\":\n      case \"!\":\n        return this.parseUnary(this.cur.value);\n    }\n\n    let expr = this.parsePrimary();\n\n    while (true) {\n      switch (this.cur.value) {\n        case \".\":\n          expr = this.parseNamedMember(expr);\n          break;\n        case \"[\":\n          expr = this.parseComputedMember(expr);\n          break;\n        case \"(\":\n          expr = this.parseCallExpression(expr);\n          break;\n        default:\n          return expr;\n      }\n    }\n  }\n\n  parseCallExpression(lhs: Expression): Expression {\n    this.consume();\n    const expr = this.cur.value === \")\" ? emptyExpressionList : this.getExpressionList();\n    if (this.expect(\")\")) {\n      return Creators.createCallExpression(lhs, expr);\n    }\n    this.raiseError(\"Expected close bracket\");\n  }\n\n  parseComputedMember(lhs: Expression): Expression {\n    this.consume();\n    if (this.expect(\"]\")) {\n      this.raiseError(\"Expected expression\");\n    }\n    const expr = this.parseExpression();\n    if (this.expect(\"]\")) {\n      return Creators.createMemberAccessorExpression(lhs, expr, true);\n    }\n    this.raiseError(\"Expected closing ]\");\n  }\n\n  parseNamedMember(lhs: Expression): Expression {\n    this.consume();\n    if (this.cur.type === \"token\") {\n      const expr = Creators.createLiteralExpression(\"string\", this.cur.value);\n      this.consume();\n      return this.cur.value === \"(\"\n        ? Creators.createMemberCallExpression(lhs, expr, this.parseArgs())\n        : Creators.createMemberAccessorExpression(lhs, expr, false);\n    }\n    this.raiseError(\"Expected identifier\");\n  }\n\n  parseUnary(unary: string) {\n    this.consume();\n    return Creators.createUnaryExpression(unary, this.parsePrefix());\n  }\n\n  parsePrimary() {\n    switch (this.cur.value) {\n      case \"(\" :\n        return this.parseBrackets();\n      case \"[\" :\n        return this.parseArray();\n      case \"{\":\n        return this.parseObject();\n      case \"true\":\n      case \"false\":\n      case \"null\":\n      case \"undefined\":\n        return this.parseKeyword(this.cur.value);\n    }\n    switch (this.cur.type) {\n      case \"string\":\n      case \"number\":\n        return this.parseLiteral(this.cur.type, this.cur.value);\n      case \"token\":\n        return this.parseIdentifier(this.cur.value);\n    }\n    this.raiseError(\"Unexpected token\");\n  }\n\n  parseIdentifier(name: string) {\n    this.consume();\n    return Creators.createScopedAccessorExpression(name);\n  }\n\n  parseLiteral(type: string, value: string) {\n    this.consume();\n    return Creators.createLiteralExpression(type, value);\n  }\n\n  parseKeyword(keyword: string): Expression {\n    this.consume();\n    return Creators.createConstExpression(keyword);\n  }\n\n  parseArray(): Expression {\n    this.consume();\n    let expressions = this.cur.value === \"]\" ? [] : this.getExpressionList();\n    if (this.expect(\"]\")) {\n      return Creators.createArrayExpression(expressions);\n    }\n    this.raiseError(\"Unexpected token\");\n  }\n\n  parseBrackets(): Expression {\n    this.consume();\n    let expr = this.parseExpression();\n    if (this.expect(\")\")) {\n      return expr;\n    }\n    this.raiseError(\"Expected )\");\n  }\n\n  parseObject(): Expression {\n    this.consume();\n    const properties = this.parseObjectProperties();\n    if (this.expect(\"}\")) {\n      return Creators.createObjectExpression(properties);\n    }\n    this.raiseError(\"Unexpected End\");\n  }\n\n  private parseObjectProperties(): ObjectProperties {\n    let propertyNames: Array<string>   = [];\n    let expressions: Array<Expression> = [];\n\n    if (this.cur.value !== \"}\") {\n      do {\n        if (this.cur.type !== \"token\") {\n          this.raiseError(\"Expected a name token\");\n        }\n        propertyNames.push(this.cur.value);\n        this.consume();\n        if (!this.expect(\":\")) {\n          this.raiseError(\"Expected a colon\");\n        }\n        expressions.push(this.parseExpression());\n      } while (this.expect(\",\"));\n    }\n    return {\n      names:       propertyNames,\n      expressions: expressions\n    };\n  }\n\n  parseArgs(): Expression[] {\n    this.consume();\n    if (this.expect(\")\")) {\n      return emptyExpressionList;\n    }\n    const args = this.getExpressionList();\n    if (this.expect(\")\")) {\n      return args;\n    }\n    this.raiseError(\"missing )\");\n  }\n\n  getExpressionList(): Array<Expression> {\n    let args: Array<Expression> = [];\n    do {\n      args.push(this.parseExpression());\n    } while (this.expect(\",\"));\n    return args;\n  }\n\n  raiseError(msg: string): Error {\n    throw new Error(`${msg} ${this.cur.value}`);\n  }\n}\n\n\nexport const Constants = {\n  literalNull : new Literal(\"null\", null),\n  literalTrue:  new Literal(\"true\", true),\n  literalFalse : new Literal(\"false\", false),\n  literalUndefined: new Literal(\"undefined\", undefined)\n};\n\nconst Creators  = {\n  createLiteralExpression : function (type: string, value: string): Expression {\n    switch (type) {\n      case \"string\":\n        return new LiteralString(value);\n      case \"number\":\n        return new LiteralNumber(parseFloat(value));\n    }\n  },\n\n  createMemberCallExpression : function(lhs: Expression, expr: Expression, args: Expression[]): Expression {\n    return new MemberCallExpression(lhs, expr, args);\n  },\n\n  createMemberAccessorExpression: function(lhs: Expression, rhs: Expression, computed: boolean): Expression {\n    return new MemberAccessorExpression(lhs, rhs, computed);\n  },\n  createCallExpression: function(lhs: Expression, args: Array<Expression>): Expression {\n    return new CallExpression(lhs, args);\n  },\n  createConstExpression: function(keyword: string): Expression {\n    switch (keyword) {\n      case \"true\":\n        return Constants.literalTrue;\n      case \"false\":\n        return Constants.literalFalse;\n      case \"null\":\n        return Constants.literalNull;\n      case \"undefined\":\n        return Constants.literalUndefined;\n    }\n  },\n  createUnaryExpression: function(op: string, expr: Expression): Expression {\n    return new UnaryExpression(op, expr);\n  },\n  createObjectExpression: function(properties: ObjectProperties): Expression {\n    return new ObjectExpression(properties.names, properties.expressions);\n  },\n  createArrayExpression: function(rc: Array<Expression>): Expression {\n    return new ArrayExpression(rc);\n  },\n  createConditionalExpression: function(test: Expression, trueCondition: Expression, falseCondition: Expression): Expression {\n    return new ConditionalExpression(test, trueCondition, falseCondition);\n  },\n  createScopedAccessorExpression: function(name: string): Expression {\n    return new ScopedAccessorExpression(name);\n  },\n  getOperatorFactory: function(name: string): ExpressionFactory {\n    switch (name) {\n      case \"||\" :\n        return BinaryFactories.or;\n      case \"&&\" :\n        return BinaryFactories.and;\n      case \"==\":\n        return BinaryFactories.equal;\n      case \"!=\":\n        return BinaryFactories.notEqual;\n      case \"===\":\n        return BinaryFactories.absEqual;\n      case \"!==\":\n        return BinaryFactories.absNotEqual;\n      case \"<\":\n        return BinaryFactories.lessThan;\n      case \">\":\n        return BinaryFactories.greaterThan;\n      case \"<=\":\n        return BinaryFactories.lessEqualThan;\n      case \">=\":\n        return BinaryFactories.greaterEqualThan;\n      case \"+\" :\n        return BinaryFactories.add;\n      case \"-\" :\n        return BinaryFactories.subtract;\n      case \"*\" :\n        return BinaryFactories.multiply;\n      case \"/\" :\n        return BinaryFactories.divide;\n      case \"%\" :\n        return BinaryFactories.modulus;\n    }\n  }\n}\n\ninterface ExpressionFactory {\n  precedence: number;\n  create(left: Expression, right: Expression): Expression;\n}\n\nclass BinaryExpressionFactory implements ExpressionFactory {\n  constructor(protected operator: string, public precedence: number) {\n  }\n  create(left: Expression, right: Expression): Expression {\n    return new BinaryExpression(this.operator, left, right);\n  }\n}\nclass LogicalExpressionFactory implements ExpressionFactory {\n  constructor(protected operator: string, public precedence: number) {\n  }\n  create(left: Expression, right: Expression): Expression {\n    return new LogicalExpression(this.operator, left, right);\n  }\n}\n\nconst BinaryFactories =  {\n  or : new LogicalExpressionFactory(\"||\", 10),\n  and : new LogicalExpressionFactory(\"&&\", 20),\n  equal : new BinaryExpressionFactory(\"==\", 30),\n  notEqual : new BinaryExpressionFactory(\"!=\", 30),\n  absEqual : new BinaryExpressionFactory(\"===\", 30),\n  absNotEqual : new BinaryExpressionFactory(\"!==\", 30),\n  greaterThan : new BinaryExpressionFactory(\">\", 40),\n  lessThan : new BinaryExpressionFactory(\"<\", 40),\n  greaterEqualThan : new BinaryExpressionFactory(\">=\", 40),\n  lessEqualThan : new BinaryExpressionFactory(\"<=\", 40),\n  add : new BinaryExpressionFactory(\"+\", 50),\n  subtract : new BinaryExpressionFactory(\"-\", 50),\n  multiply : new BinaryExpressionFactory(\"*\", 60),\n  divide : new BinaryExpressionFactory(\"/\", 60),\n  modulus : new BinaryExpressionFactory(\"%\", 60)\n};","export class Scanner {\n  private str: string;\n  private idx: number;\n  private eof: boolean;\n  private mark: number;\n\n  constructor(str: string) {\n    this.str  = str || \"\";\n    this.idx  = 0;\n    this.mark = 0;\n    this.eof  = !str;\n  }\n\n  next(): LexerToken {\n    const ch = this.readPastWhitespace();\n    return ((ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122) || ch === 95 || ch === 36)  /*A-Z$_*/\n      ? this.readIdentifier()\n      : ((ch >= 48 && ch <= 57) || (ch === 46 && this.peek1() >= 48 && this.peek1() <= 57)) /* [0-9] */\n        ? this.readNumber()\n        : ((ch === 34 /*\"*/ || ch === 39 /*' */))\n          ? this.readString(ch === 34 ? \"\\\"\" : \"'\")\n          : ch\n            ? this.readSymbol(ch)\n            : this.createEofToken();\n  }\n\n  readPastWhitespace(): number {\n    let ch = this.eof ? 0 : this.str.charCodeAt(this.idx);\n    while (ch === 32 || ch === 9 || ch === 10 || ch === 13 || ch === 160) {\n      ch = this.str.charCodeAt(++this.idx);\n    }\n    this.mark = this.idx;\n    return ch;\n  }\n\n  readString(quoteChar: string): LexerToken {\n    this.consume(); // eat quote character\n    let slash = this.str.indexOf(\"\\\\\", this.idx);\n    let quote = this.str.indexOf(quoteChar, this.idx);\n    return slash === -1 && quote !== -1\n      ? this.createStringToken(quote)\n      : this.readComplexString(quoteChar, quote, slash);\n  }\n\n  readComplexString(q: string, quote: number, slash: number): LexerToken {\n    const str = this.str;\n    let sb    = \"\";\n    let i     = this.idx;\n    while (quote !== -1) {\n      // no slash or quote before slash\n      if (slash === -1 || quote < slash) {\n        return this.createStringToken(quote, sb + str.substring(i, quote));\n      }\n      sb += (str.substring(i, slash) + unescape(str.charCodeAt(slash + 1)));\n      i = slash + 2;\n      if (quote < i) {\n        quote = str.indexOf(q, i);\n      }\n      slash = str.indexOf(\"\\\\\", i);\n    }\n    this.raiseError(\"Unterminated quote\");\n  }\n\n  readNumber(): LexerToken {\n    let ch = this.consume();\n\n    while (ch >= 48 && ch <= 57) {    // 0...9\n      ch = this.consume();\n    }\n\n    if (ch === 46) {\n      ch = this.consume();\n      while (ch >= 48 && ch <= 57) {    // 0...9\n        ch = this.consume();\n      }\n    }\n    return this.createToken(\"number\", 0);\n  }\n\n  readIdentifier(): LexerToken {\n    let ch = this.consume();\n    while (ch === 36 || ch === 95 || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122) || (ch >= 48 && ch <= 57)) {    // 0...9\n      ch = this.consume();\n    }\n    return this.createToken(\"token\", 0);\n  }\n\n  readSymbol(ch: number): LexerToken {\n    return this.createToken(\"symbol\",\n      (ch === 60 /*<*/ || ch === 62 /*>*/)\n        ? ((this.peek1() === 61 /*=*/) ? 2 : 1)\n        : (ch === 38 /*&*/ || ch === 124 /*|*/)\n        ? ((this.peek1() === ch /*=*/) ? 2 : 1)\n        : ((ch === 61 /*=*/ || ch === 33 /*!*/) && this.peek1() === 61 /*=*/)\n          ? ((this.peek2() === 61) ? 3 : 2)\n          : 1\n    );\n  }\n\n  createToken(type: string, skip: number): LexerToken {\n    this.idx += skip;\n    return new LexerToken(type, this.str.substring(this.mark, this.idx), this.mark, this.idx - 1);\n  }\n\n  createEofToken(): LexerToken {\n    this.idx = this.str.length;\n    this.eof = true;\n    return new LexerToken(\"eof\", \"\", this.str.length, this.str.length);\n  }\n\n  createStringToken(endPos: number, str?: string): LexerToken {\n    this.idx = endPos + 1;\n    return new LexerToken(\"string\", str || this.str.substring(this.mark + 1, endPos), this.mark, endPos);\n  }\n\n  raiseError(msg: string) {\n    this.idx = this.str.length;\n    this.eof = true;\n    throw new Error(msg);\n  }\n\n  peek1(): number {\n    return this.str.charCodeAt(this.idx + 1);\n  }\n\n  peek2(): number {\n    return this.str.charCodeAt(this.idx + 2);\n  }\n\n  consume(): number {\n    return this.str.charCodeAt(++this.idx);\n  }\n}\nfunction unescape(ch: number): string {\n  switch (ch) {\n    case 114 :\n      return \"\\r\";\n    case 102 :\n      return \"\\f\";\n    case 110 :\n      return \"\\n\";\n    case 116 :\n      return \"\\t\";\n    case 118 :\n      return \"\\v\";\n    case 92 :\n      return \"\\\\\";\n    case 39 :\n      return \"'\";\n    case 34 :\n      return \"\\\"\";\n    default:\n      return String.fromCharCode(ch);\n  }\n}\n\nexport class LexerToken  {\n  constructor(public type: string, public value: string, public start: number, public end: number) {\n  }\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}